# 文件是将一张图片按照滑动步长切割成大小为指定长度的小块
# 输入为strid:滑动步长，input:输入数据，label：标签数据, image_size:切片大小
# 因为mri图像一般都是三维，所以在处理时可以将其看作是n张两维的图片，并对二维图像进行处理
# 返回值是切好的小块，且标签和输入一一对应

def array_to_patch(strid, inputs, label, image_size):
    input_patches = []
    label_patches = []
    # 二维图像
    for k in range(len(inputs)):
        h = len(inputs[k])
        w = len(inputs[k][0])
        for i in range(0, h-image_size, strid):
            for j in range(0, w-image_size, strid):
                tmp_input = inputs[k][i:i+image_size, j:j+image_size]
                tmp_label = label[k][i:i+image_size, j:j+image_size]
                input_patches.append(tmp_input)
                label_patches.append(tmp_label)

    input_patches = np.array(input_patches, dtype=np.float)
    label_patches = np.array(label_patches, dtype=np.float)
    for i in range(len(input_patches)):
        max_input = np.max(input_patches[i])
        # 归一化，自然图像一般最大值是255，如果是mri图像，则使用np.max()求最大值，考虑有些切片全黑导致最大值为0，则需判断是否为0而保证不会有除0操作
        input_patches[i] /= 255
    print("input data is ready")
    for i in range(len(label_patches)):
        max_label = np.max(label_patches[i])
        # 同上
        label_patches[i] /= 255
    print("label data is ready")
    input_patches = np.reshape(input_patches, newshape=[len(input_patches), image_size, image_size, 1])
    label_patches = np.reshape(label_patches, newshape=[len(label_patches), image_size, image_size, 1])
    print("the shape of train data is {}".format(input_patches.shape))
    return input_patches, label_patches
